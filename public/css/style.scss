$main: rgb(37, 22, 122);
$lblue: rgb(0, 167, 211);
$dblue: rgb(45, 108, 192);
$green: rgb(122, 161, 0);
$red: rgb(211, 17, 69);
$bred: rgb(137, 6, 86);
$orange: rgb(239, 166, 29);
$yellow: rgb(255, 210, 0);

$black: rgb(70, 70, 70);
$white: rgb(244, 244, 244);
$grey: rgb(130, 130, 130);

$trans: .25s;
$radius: .3rem;

$breakpoint: 50em;

* {
	box-sizing: border-box;
	font-family: Open Sans, Helvetica, Arial, sans-serif;
}

body {
	background-color: rgba($main, 0.2);
	margin: 0;
	font-size: 1.1em;
	color: $black;
}

img {
	max-width: 100%;
}

*:focus {
	outline-color: $lblue;
}

h2 {
	font-size: 1.2em;
}

.hidden {
	display: none !important;
}

.dev {
	position: fixed;
    bottom: 0;
	width: 100%;
	color: red;
	font-style: italic;
	font-size: 1.2em;
	text-transform: uppercase;
	text-align: center;
	text-shadow: 0px 0px 2px black;
	& + .dev {
		top: 0;
		bottom: unset;
	}
}

#notify.container {
	display: flex;
	flex-direction: column-reverse;
    position: absolute;
    right: 0;
	bottom: 0;
	width: 20em;
	p {
		margin: 0;
		width: 100%;
		text-align: right;
		&::before {
			content: 'x';
			color: rgba($grey, .5);
			float: left;
			transition: $trans;
			cursor: pointer;
			&:hover {
				color: $grey;
			}
		}
		&:hover {
			&::before {
				color: rgba($grey, .8);
			}
		}
		&.error {
			background-color: $yellow;
			border-color: $orange;
		}
	}
}

.content {
	position: relative;
	background-color: $white;
	display: grid;
	width: auto;
	padding: 1rem;
	margin: 0;
	border-radius: $radius;
	box-shadow: 0 3px 6px rgba($main, .2);
	@media (min-width: $breakpoint) {
		margin: 1rem;
		grid-template-rows: 4em 1fr;
		height: 96.5vh;
	}
	&.login, &.small {
		position: unset;
		display: block;
		height: auto;
		margin: 0 auto;
		max-width: 24em;
		padding: 2rem 3rem;
		img {
			max-width: 18em;
			display: block;
			margin: 0 auto 2em;
		}
	}
}

main {
	& > * {
		display: grid;
	}
}

.modal {
	position: fixed;
	background-color: rgba($black, .4);
	width: 100%;
	height: 100%;
	top: 0;
	.content {
		display: grid;
		grid-template-columns: 20fr 1fr;
		grid-template-rows: 4em 1fr;
		position: absolute;
		width: 80%;
		height: 80%;
		left: 50%;
		top: 50%;
		transform: translate(-50%, -50%);
		padding-left: 3rem;
		overflow-y: scroll;
	}
}

header {
	display: flex;
	align-items: center;
	flex-wrap: wrap;
	@media (min-width: $breakpoint) {
		// display: grid;
		grid-template-rows: 4em 1fr;
		// height: 96.5vh;	
	}
	@media (max-width: $breakpoint) {
		
			@media (max-width: $breakpoint/1.2) {
				justify-content: space-around;
				h1 {
					text-align: center;
					width: 100%;
				}
			}
		
	}
	img {
		max-width: 12em;
	}
	h1 {
		font-size: 1.4em;
		flex-grow: 2;
		@media (min-width: $breakpoint/1.2) {
			&::before {
				content: "|";
				color: $grey;
				opacity: .5;
				margin-right: .8rem;
			}
		}
	}
	&.interview {
		flex-direction: column;
		margin: -1rem -1rem 0;
		& > div {
			width: 100%;
			display: flex;
			justify-content: space-between;
			& > div {
				display: flex;
				align-items: center;
				& > div {
					p {
						&:nth-of-type(2) {
							font-size: .8em;
							margin-top: -1em;
						}
					}
				}
			}
		}
	}
	.icon.settings {
		svg {
			fill: $grey;
		}
	}
}

.progress {
	align-self: flex-start;
    width: 100%;
    height: 1em;
    background-color: red;
    content: " ";
}

input, textarea {
	width: 100%;
	font-size: 1.2em;
	padding: .5em;
	margin-bottom: 1em;
	margin-top: .5em;
	border-radius: $radius;
	border: none;
	&:not(.rating) {
		box-shadow: 0px 0px 3px 1px inset rgba($main, .4);
	}
	transition: $trans;
	&[type=radio].hide {
		max-width: 0;
		opacity: 0;
		clip: rect(0,0,0,0);
		position: absolute;
	}
	&:focus {
		outline: none;
		box-shadow: 0px 0px 3px 3px inset rgba($main, .4);
	}
}

input[type=range] {
	-webkit-appearance: none;
    width: 100%;
    height: .1rem;
    background: rgba($main, .1);
    // outline: none;
    opacity: 0.7;
	transition: $trans;
	&::-webkit-slider-thumb {
		-webkit-appearance: none;
		appearance: none;
		width: 2rem;
		height: 2rem;
		border-radius: 100%;
		background: rgba($main, .8);
		cursor: pointer;
	}
	&::-moz-range-thumb {
		width: 2rem;
		height: 2rem;
		border-radius: 100%;
		background: rgba($main, .8);
		cursor: pointer;
	}
}

textarea {
	padding-top: 0;
}

select {
	font-size: 1.2em;
	-webkit-appearance: none;
	-moz-appearance: none;
	padding: 0 .6rem;
}

label {
	display: block;
	color: $grey;
	font-size: .95em;
	margin-bottom: .5em;
}

.grid {
	display: grid;
	@media (max-width: $breakpoint) {
		display: flex;
		flex-wrap: wrap;
		&.col-50 {
			flex-direction: column-reverse;
		}
		&.row-TWB {
			flex-direction: column;
			margin-bottom: 2em;
		}
		#scripts + .flex {
			display: none;
		}
	}
	@media (min-width: $breakpoint) {
		max-height: 85vh; // This would be content area - header
	}
	@media (min-width: $breakpoint) {
		&.col-50 {
			grid-template-columns: 50% 1fr;
			& > * {
				margin-right: .8rem;
				+ * {
					margin-left: .8rem;
					margin-right: 0;
				}
			}
			&.split {
				grid-template-columns: 47.5% 5% 47.5%;
				transition: grid-template-columns 1s;
				& > * {
					margin: 0 !important;
				}
				&.smaller {
					grid-template-columns: 27.5% 5% 67.5%;
				}
			}
		}
	}
	&.col-131 {
		grid-template-columns: 1fr 50% 1fr;
	}
	&.col-21 {
		grid-template-columns: 2fr 1fr;
	}
	&.row-50 {
		grid-template-rows: 50% 50%;
		.grid {
			&.row-TWB {
				@media (min-width: $breakpoint) {
					max-height: 42.5vh;
				}
			}
		}
	}
	&.row-46 {
		grid-template-rows: 40% 60%;
		.grid {
			&.row-TWB {
				@media (min-width: $breakpoint) {
					max-height: 59.5vh;
				}
			}
		}
	}
	@media (min-width: $breakpoint) {
		&.row-TWB {
			grid-template-rows: 3.3em 1fr;
			header + & {
				grid-template-rows: 4em 1fr;
			}
		}
	}
	&.row-BB {
		grid-template-rows: 1fr;
	}
	
}

.flex {
	display: flex;
	&.center {
		align-items: center;
	}
	&.spread {
		justify-content: space-between;
	}
}

.scrollwindow {
	background-color: rgba($main, .1);
	overflow-y: scroll;
	max-height: inherit;
	padding: .6rem;
	border-radius: $radius;
	transition: $trans;
	&:focus-within {
		background-color: rgba($main, .15);
	}
}

.button, input[type=submit], button {
	background-color: $green;
	color: $white;
	font-size: 1.2em;
	padding: .4rem;
	transition: background-color $trans;
	border: none;
	border-radius: $radius;
	width: 100%;
	cursor: pointer;
	&:hover, &:focus {
		background-color: lighten($green, 4);
	}
	&:focus {
		outline: none;
		text-decoration: underline;
	}
	&.small {
		// padding: .4rem 1.4rem; // This cant be here
		width: auto;
	}
	&.shadowed {
		box-shadow: 0 0.1em .4em darken($grey, 10);
		&:active {
			box-shadow: 0 0 .1em darken($grey, 10);
		}
	}
	&.secondary {
		background-color: $dblue;
		svg {
			fill: white;
		}
		&:hover, &:focus {
			background-color: lighten($dblue, 8);
		}
	}
	&.warning {
		background-color: $orange;
		&:hover, &:focus {
			background-color: lighten($orange, 8);
		}
	}
	&:disabled, &.inactive {
		background-color: $grey;
		&:hover, &:focus {
			background-color: $grey;
		}
	}
	&:disabled {
		cursor: not-allowed;
	}
	&.none, &.transparent {
		color: $black;
		background-color: rgba($black, 0);
		border: 1px solid rgba($main, 0);
		&:focus:not(.none), &:hover:not(.none) {
			background-color: rgba($black, 0.1);
		}
		&:focus {
			border: 1px solid $main;
		}
	}

}

.buttonRow {
	display: flex;
	button {
		margin-top: 1em;
		&:not(:first-of-type) {
			margin-left: 1em;
		}
	}
}

.icon {
	min-width: 2em;
	max-width: 4em;
	&.point {
		fill: $grey;
		max-width: 70%;
		margin: 0 auto;
	}
	&.mic {
		width: 2.2em;
		&.recording {
			fill: $green;
		}
	}
	&.error svg {
		fill: $red;
	}
	&.pencil, &.cancel {
		padding: .2rem;
		fill: $grey;
		transform: rotate(90deg);
		transition: $trans;
		&:hover, &:focus {
			fill: $black;
		}
	}
}

#scripts {
	input[type=radio] {
		&:checked + div {
			border-color: $main;
		}
	}
	& > div {
		display: flex;
		justify-content: space-between;
		border: 2px solid rgba($main, .2);
		background-color: $white;
		border-radius: $radius;
		padding: 1rem 1rem;
		margin-bottom: 1rem;
		transition: $trans;
		p {
			margin-top: 0;
		}
		&.selected {
			border: 2px solid $main !important;
		}
	}
	&:focus-within {
		& > div {
			border: 2px solid rgba($main, .4);
		}
	}
	&.locked {
		opacity: .5;
		cursor: not-allowed;
	}
}

.controls {
	// width: 1.6em;
	margin-right: -.5rem;
	margin-top: -.3rem;
	button {
		margin-top: 1rem;
	}
	svg {
		max-width: 1.6em;
		display: block;
		margin: 0 auto;
		fill: $grey;
	}
}

.cached {
	.controls {
		.checked svg {
			fill: $green;
		}
	}
}

.metabox {
	margin: 0 auto;
    background-color: rgba($main, .1);
    padding: 1em 2em;
}

.loading {
	width: 2em;
	height: 2em;
	margin: 2em auto;
	background-color: $main !important;
	border-radius: $radius;
	animation: scaleout 1.0s infinite ease-in-out;
}

form[name=interview] {
	margin: 0 -1rem -1rem -1rem;
	grid-template-columns: 1fr;
	@media (min-width: $breakpoint) {
		grid-template-columns: 1fr 3.5em;
	}
	& > div {
		text-align: center;
		margin: 0 auto;
		p:first-of-type {
			background-color: rgba($main, 0.1);
			font-size: 1.8em;
			@media (min-width: $breakpoint) {
				font-size: 2.4em;
			}
			padding: 1em;
			margin-top: 2em;
			display: inline-block;
		}
	}
}

.entry {
	display: flex;
	flex-wrap: wrap;
	justify-content: space-between;
	h2 {
		font-size: 2em;
		margin: .5rem 0;
	}
	h3 {
		font-size: 1.4em;
	}
	.metas {
		display: flex;
		flex-direction: column;
		justify-content: flex-end;
		padding-top: 3rem;
		p {
			display: inline;
			&:first-of-type {
				&::after {
					content: ':';
					margin-right: .4em;
				}
			}
		}
	}
	.responses {
		// border: 2px solid rgba($main, .2);
		width: 100%;
		// max-width: 30em;
		border-radius: $radius;
		.playing {
			// TODO: Smth with playing state
		}

		// & > * {
		// 	padding: 1rem;
		// 	margin: 0;
		// 	transition: $trans;
		// }
		// & > div:nth-of-type(2n - 1) {
		// 	background-color: rgba($main, .1);
		// 	&.playing {
		// 		background-color: rgba($main, .2);
		// 	}
		// }
		p {
			margin: 0;
			&:nth-of-type(2) {
				font-style: italic;
			}
			// font-weight: 600;
		}
		.rating svg {
			width: 1.4em;
			@media (min-width: $breakpoint) {
				width: 1.8em;
			}
			@media (min-width: $breakpoint/1.5) {
				width: 1.2em;
			}
		}
		@media (max-width: $breakpoint/1.5) {
			audio {
				display: none;
			}
		}
		.flex {
			justify-content: space-between;
			align-items: baseline;
			flex-wrap: wrap;
			margin: .6rem 0;
			max-width: 35em;
		}
		& > div {
			margin-bottom: 2rem;
		}
	}
	.key {
		font-weight: bold;
	}
	.inputwrapper.checkbox {
		align-items: center;
	}
}

.rating {
	display: flex;
	justify-content: space-around;
	.icon {
		width: 1em;
		fill: rgba($orange, 0);
		&.selected {
			fill: rgba($orange, 1);
		}
	}
	& > *:not(.disabled) {
		&:focus-within {
			.icon {
				fill: rgba($orange, .5);
			}
		}
		.icon {
			&:hover {
				fill: rgba($orange, .5);
			}
			&.selected {
				&:hover {
					fill: rgba($orange, .8) !important;
				}
			}
		}
	}
	path {
		stroke: $orange;
		stroke-width: 25px;
	}
}

.answer {
	p {
		display: inline;
	}
}

.postentry, #preview p, .metaentry, .questionentry, .entry, #notify p {
	display: block;
	border: 2px solid rgba($main, .2);
	background-color: $white;
	border-radius: $radius;
	padding: 1rem 1rem;
	margin-top: 0;
	margin-bottom: 1rem;
	.number {
		margin-right: 1rem;
		font-style: italic;
		font-size: 2em;
	}
	.rating {
		max-width: 30em;
	}
	input {
		max-width: 90%;
		margin-right: 2%;
	}
	button{
		width: 8%;
	}
	&.meta, &.title, &.description {
		background-color: rgba($white, .7);
	}
	&.add {
		color: $grey;
		background-color: rgba($white, .1);
		cursor: pointer;
	}
	&.noQuestions {
		background-color: rgba($white, 0);
	}
}

#preview {
	.controls {
		justify-content: flex-end;
		margin-right: -.7rem;
		margin-bottom: -1rem;
		margin-top: -.6rem;
		button {
			margin-top: 0;
			padding: .2rem;
			svg {
				width: 1em;
			}
		}
		.icon.back, .icon.next {
			transform: rotate(-90deg);
		}
		+ p {
			margin-top: 1em;
		}
	}
	.removing {
		cursor: not-allowed;
		opacity: .5;
	}
	select {
		margin-top: .1rem;
		font-size: .8em;
	}
	h3 {
		margin-top: 2em;
		&:first-of-type {
			margin-top: 0;
		}
	}
	h4 {
		margin-bottom: .4rem;
	}
	// Disable the up and down button
	// No way to remove the last down button however, so disabled for now
	// > div {
	// 	.controls button:nth-of-type(2) {
	// 		display: none;
	// 	}
	// 	.controls button:nth-of-type(1) {
	// 		// display: none;
	// 	}
	// 	+ div {
	// 		.controls button:nth-of-type(2) {
	// 			display: block;
	// 		}
	// 	}
	// }
}

button.none {
	.cancel {
		display: none;
	}
}
button.none.active {
	.pencil {
		display: none;
	}
	.cancel {
		display: block;
	}
}

.inputwrapper {
	&.checkbox {
		display: flex;
		align-items: baseline;
		input {
			order: -1;
			width: auto;
			margin-bottom: 0;
		}
	}
	&.range + .values {
		margin: -2rem 1.5rem 0;
		color: rgba($main, .4);
	}
}

.resultActions {
	display: flex;
	flex-wrap: wrap;
	margin: 1rem 0;
	select {
		flex-grow: 1;
		margin-right: 1rem;
	}
	& > *:not(:first-of-type) {
		margin-left: 1rem;
	}
	.small {
		padding: .4rem 1.4rem;
	}
	@media (max-width: $breakpoint) {
		justify-content: space-around;
		select {
			width: 100%;
			margin: 0 0 2rem;
		}
	}
}
  
@keyframes scaleout {
	0% { 
		transform: scale(0);
	} 
	75% {
		transform: scale(1.0);
		opacity: 0;
	}
	100% {
		transform: scale(1.0);
		opacity: 0;
	}
}

// Based of Animate.css https://github.com/daneden/animate.css/blob/master/animate.css
.animated {
	animation-duration: 1s;
	&.fadeIn {
		animation: fadeIn;
		animation-duration: $trans;
	}
	&.fadeInUp {
		animation-name: fadeInUp;
	}
	&.fadeOutDown {
		animation-duration: .5s;
		animation-name: fadeOutDown;
	}
	&.fadeInRight {
		animation-name: fadeInRight;
	}
	&.fadeInLeft {
		@for $i from 1 through 4 {
			&:nth-of-type(#{$i}) {
				animation-duration: #{$i * 0.2}s;
			}
		}
		animation-name: fadeInLeft;
	}
}

@keyframes fadeIn {
	from {
	  opacity: 0;
	}
  
	to {
	  opacity: 1;
	}
}

@keyframes fadeInUp {
	from {
	  opacity: 0;
	  transform: translate3d(0, 100%, 0);
	}
  
	to {
	  opacity: 1;
	  transform: translate3d(0, 0, 0);
	}
}

@keyframes fadeOutDown {
	from {
	  opacity: 1;
	}
  
	to {
	  opacity: 0;
	  transform: translate3d(0, 100%, 0);
	}
}

@keyframes fadeInRight {
	from {
	  opacity: 0;
	  transform: translate3d(100%, 0, 0);
	}
  
	to {
	  opacity: 1;
	  transform: translate3d(0, 0, 0);
	}
}

  @keyframes fadeInLeft {
	from {
	  opacity: 0;
	  transform: translate3d(-100%, 0, 0);
	}
  
	to {
	  opacity: 1;
	  transform: translate3d(0, 0, 0);
	}
}