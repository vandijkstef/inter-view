#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const http = require('http');
const https = require('https');
const fs = require('fs');
const isElevated = require('is-elevated');

isElevated().then((elevated) => {
	if (elevated) {
		if (fs.existsSync('./localhost.key') && fs.existsSync('./localhost.crt')) {
			const options = {
				key: fs.readFileSync('./localhost.key'),
				cert: fs.readFileSync('./localhost.crt')
			};
			const SSLserver = https.createServer(options, app);
			SSLserver.listen(443);
			SSLserver.on('error', onError);
			SSLserver.on('listening', onListeningSSL);
		} else {
			console.log('Refer to README.md to generate local SSL certificates');
		}
	} else {
		console.log('Please run as admin to use HTTPS/SSL');
	}
});

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	const bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
	case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
	default:
		throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address();
	const bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	console.log('Listening on ' + bind);
}

function onListeningSSL() {
	console.log('Listening SSL');
}